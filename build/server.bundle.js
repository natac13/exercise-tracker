!function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=5)}([function(e,r){e.exports=require("chalk")},function(e,r){e.exports=require("mongoose")},function(e,r){e.exports=require("express")},function(e,r){e.exports=require("path")},function(e,r){e.exports=require("date-fns/fp/format")},function(e,r,t){e.exports=t(10)},function(e,r){e.exports=require("body-parser")},function(e,r){e.exports=require("cors")},function(e,r){e.exports=require("dotenv")},function(e,r){e.exports=require("@babel/types")},function(e,r,t){"use strict";t.r(r);var n=t(0),o=t.n(n),s=t(3),a=t.n(s),u=t(1),i=t.n(u);function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.forEach(function(r){d(e,r,t[r])})}return e}function d(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}i.a.Promise=global.Promise;const l={useNewUrlParser:!0,useFindAndModify:!1,useCreateIndex:!0};var f=async function(e,r){if("development"===e){i.a.set("debug",!0);try{const e=await i.a.connect(r,c({},l,{user:process.env.DB_USER,pass:process.env.DB_PASS,dbName:process.env.DB}));return console.log(o.a.green("\nConnected to the development Database üè¨")),console.log(o.a.yellow("Good Luck! üçå")),e}catch(e){return console.log(o.a.red(e)),Promise.reject(new Error("Failed to connect to development DB"))}}else if("production"===e)try{const e=await i.a.connect(r,c({},l,{autoIndex:!1,user:process.env.DB_USER,pass:process.env.DB_PASS,dbName:process.env.DB}));return console.log(o.a.cyan("Connected on production Database üè¨")),e}catch(e){return Promise.reject(new Error("Failed to connect to mongoDB"))}return!1},p=t(2),b=t.n(p);const m=new u.Schema({username:String});var y=i.a.model("User",m);const g=b.a.Router();g.post("/new-user",async(e,r,t)=>{const{body:n}=e,{username:o}=n;if(!o)return t();await y.findOne({username:o})&&r.json({error:"User already exist."});const s=await y.create({username:o}),a={username:s.username,_id:s._id};r.json(a).status(200)});var v=g,j=t(4),O=t.n(j);const w=new u.Schema({userId:String,description:String,duration:Number,date:Date});var x=i.a.model("Exercise",w);t(9);function P(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}const S=b.a.Router();S.post("/add",async(e,r,t)=>{const{body:n}=e,{userId:o,description:s,duration:a,date:u}=n;if(!n)return t();if(!o||!s||!a)return r.json({error:"Missing fields that are required."});const i=await y.findById(o);if(!i)return r.json({error:`No user with given id: ${o}`});const c={username:i.username,description:s,duration:a,date:u,userId:o},d=await x.create(c);return r.json({_id:d.id,username:i.username,description:d.description,duration:d.duration,date:O()("yyyy-MM-dd")(d.date)})}),S.get("/log",async(e,r,t)=>{const{query:n}=e;console.log(n);const{userId:o,from:s,to:a,limit:u}=n;if(!o)return r.send("Required a userId to search.");const i={userId:o};s&&(i.date={$gte:s}),a&&(i.date=function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.forEach(function(r){P(e,r,t[r])})}return e}({},i.date,{$lte:a}));const c=parseInt(u,10);if(c||0===c){const e=await x.find(i,{__v:0}).limit(c);return r.json(e).status(200)}const d=await x.find(i,{__v:0});return r.json(d).status(200)});var _=S;const h=t(2),D=h(),q=t(6),I=t(7);t(8).config();f("production",process.env.MONGO_URI);D.use(I()),D.use(q.urlencoded({extended:!1})),D.use(q.json()),D.use("/css",h.static(a.a.resolve(__dirname,"..","public"))),D.get("/",(e,r)=>{r.sendFile(a.a.resolve(__dirname,"..","views/index.html"))}),D.use("/api/exercise",v,_),D.use((e,r,t)=>t({status:404,message:"not found"})),D.use((e,r,t,n)=>{let o,s;if(e.errors){o=400;const r=Object.keys(e.errors);s=e.errors[r[0]].message}else o=e.status||500,s=e.message||"Internal Server Error";t.status(o).type("txt").send(s)});const B=process.env.PORT||3033;D.set("port",B),D.listen(B,()=>console.log(o.a.green("üëè Production Server Running on port: "),o.a.bold(B)))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,