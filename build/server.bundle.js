!function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)n.d(t,o,function(r){return e[r]}.bind(null,o));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=3)}([function(e,r){e.exports=require("chalk")},function(e,r){e.exports=require("mongoose")},function(e,r){e.exports=require("path")},function(e,r,n){e.exports=n(8)},function(e,r){e.exports=require("express")},function(e,r){e.exports=require("body-parser")},function(e,r){e.exports=require("cors")},function(e,r){e.exports=require("dotenv")},function(e,r,n){"use strict";n.r(r);var t=n(0),o=n.n(t),s=n(2),c=n.n(s),u=n(1),i=n.n(u);function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{},t=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.forEach(function(r){l(e,r,n[r])})}return e}function l(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}i.a.Promise=global.Promise;const p={useNewUrlParser:!0,useFindAndModify:!1,useCreateIndex:!0};var f=async function(e,r){if("production"!==e&&i.a.set("debug",!0),"development"===e)try{const e=await i.a.connect(r,a({},p,{user:process.env.DB_USER,pass:process.env.DB_PASS,dbName:process.env.DB}));return console.log(o.a.green("\nConnected to the development Database üè¨")),console.log(o.a.yellow("Good Luck! üçå")),e}catch(e){return console.log(o.a.red(e)),Promise.reject(new Error("Failed to connect to development DB"))}else if("production"===e)try{const e=await i.a.connect(r,a({},p,{autoIndex:!1,user:process.env.DB_USER,pass:process.env.DB_PASS,dbName:process.env.DB}));return console.log(o.a.cyan("Connected on production Database üè¨")),e}catch(e){return Promise.reject(new Error("Failed to connect to mongoDB"))}return!1};const d=n(4),b=d(),y=n(5),g=n(6);n(7).config();f("production",process.env.MONGO_URI);b.use(g()),b.use(y.urlencoded({extended:!1})),b.use(y.json()),b.use(d.static("public/assets")),b.get("/*",(e,r)=>{r.sendFile(c.a.resolve(__dirname,"..","public/index.html"))}),b.use((e,r,n)=>n({status:404,message:"not found"})),b.use((e,r,n,t)=>{let o,s;if(e.errors){o=400;const r=Object.keys(e.errors);s=e.errors[r[0]].message}else o=e.status||500,s=e.message||"Internal Server Error";n.status(o).type("txt").send(s)});const v=process.env.PORT||3033;b.set("port",v),b.listen(v,()=>console.log(o.a.green("üëè Production Server Running on port: "),o.a.bold(v)))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,